---
layout: post
title: Mappum structures mapping DSL
categories: [mappum]
---

I have created this blog to share my thoughts on software. The newest idea I'm working on is "Mappum":http://wiki.github.com/simcha/mappum. Mappum is a tool, which makes mapping of structure to structure much easier. You would know mapping, nothing special, simply coping values from one structure to another. One instance will do the job. When programing we would use simple "=" and several "if-not-nulls" to make the mappings with no hassle. So what's the point. Can you thing of making mapings all day long, no? Lucky you. Mapping is what Enterprise Integration is really about; Not only, but mostly. 

When doing many, many mappings you start to see limitation of the "=" and "few if-not-nulls" approach. Main limitation is that you need to write the code twice, map Client >> Person and then Client << Person. And 95% of times one is the opposite of the other, when left side is:

{% highlight java %}
person_address = person.getAddress()
if (person_address != null) {
  client.getAddress().setStreet(person_address.getStreetName())
}
{% endhighlight %}	

and the right:

{% highlight java %}
client_address = client.getAddress()
if (client_address != null) {
  person.getAddress().setStreetName(client_address.getStreet())
}
{% endhighlight %}

You can spot only a small difference. Yet the difference is there and has to stay. It creates a necessity for duplication, which is always bad. If later you spot an error in one place you will need to replace it everywhere. 

The code is simple, but if you throw in couple of iterations over some lists, some date conversions your code gets almost unreadable. The solution we use is to document within the code. Yet our clients when involved in analysis does not like to read and write into the code. 

Looking for solutions for this problem I found "Dozer":http://dozer.sourceforge.net/. It has few advantages:

* It's stable (version 5 at the time article was written),
* It supports bidirectional mappings,
* It's fast enough.

The above mapping in dozer would look like this:

{% highlight xml %}
  <mapping>
    <class-a>org.test.crm.Client.Address</class-a>
    <class-b>org.test.erp.Address</class-b>
       <field>
        <A>streetName</A>
        <B>street</B>
      </field>
  </mapping>
{% endhighlight %}

As you can see the language of choice for the mappings in Dozer is XML. I have nothing against XML as document mark-up language but as a programing language it has many disadvantages. I admit it`s personal, I don't like XML when used for programing.

Out of the real need and personal issues regarding XML I decided to try a new way. I've created Ruby DSL (Domain Specific Language) which can handle the structure mapping. I chose DSL because in some corner cases mapping is overly complicated. Having full blown language to solve this is crucial for the success of a maping tool. The language is build around an idea of a map. Maps bind or map two structures or elements of structures. Let as see the example: 

{% highlight ruby %}
map client.address <=> person.address do |client_address, person_address|
  map client_address.street <=> person_address.street_name
end
{% endhighlight %}

As you can see in the above example maps can be nested. Maps can be bidirectional and unidirectional. Where unidirectional they can have Ruby code as an argument. This way our language is not less powerful then ruby in solving corner cases. Having declarative syntax give us opportunity to generate interesting things from defined maps. For example we can make definitions for translating engines. We have built two such engines one for Ruby objects and one for XML documents. The tool can generate documentation for html page with graph description for your mapping. Screenshot of such page can be found "here":http://wiki.github.com/simcha/mappum/screenshots. Simple graph for the above map will be:

!http://simcha.github.com/mappum/screenshots/1-blog-post-map.png!

So what we have now is a working mapping engine with little http server. My friend Andrzej Derlacki just finished "ServiceMix":http://servicemix.apache.org service engine (not jet on the web). Hi also works on the "Mule":http://www.mulesource.com/ plugin. Mapping language has many important "features":http://wiki.github.com/simcha/mappum/syntax i.e. dictionary mapping, lists handling. We steel lack many important options:

* Multiple structures map, now we are limited to one-one mapping,
* Constant mapping (now one need to return constant value from unidirectional map).

And probably the most important thing for many of us would be the GUI editor. Our collogue from "IVMX":http://www.ivmx.pl Adam DÄ…browski is working on this issue. When it's done we can start using Mappum as a part of analytic process. All our tools are or will be open source. We hope some of you will try it, maybe use it and throw in a bug report or a fix. As you see the project is at github where it's easy to play with. As of time of writing this post Mappum is very new and can dramatically change, please let us know if you want to use it on a professional production. Maybe some day when it's mature enough we can ask people at Dozer to add Mappum as another way to define maps. 


